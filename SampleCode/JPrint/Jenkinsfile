pipeline { 
    agent {
        label 'docker'
    }
    tools {
        maven 'mvn'
    }
    options {
        timestamps()
    }
    environment {
        imagename = "brokenleg/jprint"
        dockercredentials = 'dockerhub'
        dockerImage = ''
    }

    stages {
        stage ('Checkout'){
            steps {
                git branch: "main",
                credentialsId: "github",
                url: "https://github.com/codehub-learn/containers-internal-showcase.git"
                }
        }
        stage('Build') { 
            steps { 
                dir("SampleCode/JPrint/"){
                    sh 'mvn clean compile'
                }
            }
        }
        stage('Test') { 
            steps { 
                dir("SampleCode/JPrint/"){
                    sh 'mvn clean test'
                }
            }
            post {
                failure{
                    archiveArtifacts artifacts: "**/target/surefire-reports/*.xml"
                }
            }
        }
        stage('Package') { 
            steps { 
                dir("SampleCode/JPrint/"){
                    sh 'mvn package -Dmaven.test.skip=true'
                }
            }
            post {
                success{
                    archiveArtifacts artifacts: "**/target/*.jar"
                }               
            }
        }
         stage ('Create docker Image') {
            steps {
                dir("SampleCode/JPrint/"){
                    script{
                        dockerImage = docker.build imagename
                    }
                }
            }
        }
        stage('Push image to registry') {
            steps{
                script {
                    docker.withRegistry( '', dockercredentials ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
         stage('Deploy Image in container') {
            steps{
                script{

                    sh "docker container stop \$(docker container ls -a -q)"
                    sh "docker container rm \$(docker container ls -a -q)"
                    docker.image(imagename).run('-p 8081:8080')
                }
            }
        }
        
    }
    post {
        failure {
            mail to: "kmakedos@athtech.gr",
            subject: "Build Failed: $BUILD_TAG",
            body: "Link to JOB $BUILD_URL"

        }
        always{
            junit "**/target/surefire-reports/*.xml"
        }
    }
}
